{"version":3,"sources":["../../../src/arduino/modules/-read.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,SAAP,IAAI,CAAY,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE;AACzD,QAAM,GAAG,MAAM,IAAI,KAAK,CAAC;AACzB,aAAW,GAAG,WAAW,IAAI,GAAG,CAAC;AACjC,MAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,MAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACf,MAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAChB,MAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AACvB,MAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzC,MAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACtB,MAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AACtB,MAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC9B,MAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC/B,MAAI,CAAC,IAAI,GAAG;AACV,YAAQ,EAAE,CAAC;AACX,cAAU,EAAE,IAAI;AAChB,UAAM,EAAE,IAAI;GACb,CAAC;;AAEF,MAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAS,KAAK,EAAE,KAAK,EAAE;AACvC,QAAI,IAAI,CAAC,MAAM,EAAC;AACd,UAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KACvB,MAAI;AACH,UAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;KAC7C;AACD,QAAI,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACtB,QAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE;;AAE5H,QAAE,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,EAAE;AACrC,WAAG,EAAE,IAAI,CAAC,GAAG;AACb,cAAM,EAAE,IAAI,CAAC,MAAM;OACpB,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;KAC3B;GACF,CAAC,CAAC;;AAEH,MAAI,CAAC,SAAS,GAAG,YAAW;AAC1B,WAAO,IAAI,CAAC,MAAM,CAAC;GACpB,CAAC;AACF,MAAI,CAAC,SAAS,GAAG,UAAS,MAAM,EAAC;AAC/B,QAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC/B,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC;GACtB,CAAC;AACF,MAAI,CAAC,eAAe,GAAG,UAAS,GAAG,EAAC;AAClC,WAAQ,IAAI,CAAC,SAAS,IAAI,GAAG,GAAG,GAAG,GAAC,CAAC,GAAC,CAAC,CAAE;GAC1C;;AAAC,AAEF,MAAI,CAAC,QAAQ,GAAG,UAAS,GAAG,EAAC;AAC3B,WAAO,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;GAC9B,CAAC;CACH,CAAC;;AAEF,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC","file":"-read.js","sourcesContent":["var read = function(arduino, io, pin, analog, minDuration) {\n  analog = analog || false;\n  minDuration = minDuration || 100;\n  var that = this;\n\n  this.pin = pin;\n  this.status = 0;\n  this.lastStatus = null;\n  this.readPin = new arduino.Pin(this.pin);\n  this.analogPin = true;\n  this.lastSendTime = 0;\n  this.analog = Boolean(analog);\n  this.minDuration = minDuration;\n  this.last = {\n    sendTime: 0,\n    sendStatus: null,\n    status: null\n  };\n\n  this.readPin.read(function(error, value) {\n    if (this.analog){\n      that.setStatus(value);\n    }else{\n      that.setStatus(that.analogToDigital(value));\n    }\n    var time = Date.now();\n    if (that.status !== that.last.status && that.status !== that.last.sendStatus && time - that.last.SentTime > that.minDuration) {\n      // console.log (that.status);\n      io.sockets.emit(routeName + ':change', {\n        pin: that.pin,\n        status: that.status\n      });\n      that.last.sendTime = time;\n    }\n  });\n\n  this.getStatus = function() {\n    return this.status;\n  };\n  this.setStatus = function(status){\n    this.last.status = this.status;\n    this.status = status;\n  };\n  this.analogToDigital = function(val){\n    return (this.analogPin && val < 512?0:1);\n  };\n  //remove this\n  this.isAnalog = function(pin){\n    return arduino.isAnalog(pin);\n  };\n};\n\nmodules.exports = read;\n"]}