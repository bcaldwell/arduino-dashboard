{"version":3,"sources":["../../../src/arduino/modules/analogWrite.js"],"names":[],"mappings":";;AAAA,IAAI,SAAS,GAAG,aAAa,CAAC;AAC9B,MAAM,CAAC,OAAO,GAAG;AACf,MAAI,EAAE,cAAc;AACpB,WAAS,EAAE,SAAS;AACpB,MAAI,EAAE,cAAS,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE;AAC/B,WAAO,IAAI,WAAW,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;GACtC;AACD,OAAK,EAAE,eAAS,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;AAClC,QAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE;AAC1B,UAAI,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC7B,UAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACtC,QAAE,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,EAAE;AACrC,WAAG,EAAE,GAAG;AACR,cAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE;OAC9B,CAAC,CAAC;KACJ;GACF;CAEF,CAAC;;;AAGF,IAAI,WAAW,GAAG,SAAd,WAAW,CAAY,OAAO,EAAE,GAAG,EAAE;AACvC,MAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACf,MAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAChB,SAAO,CAAC,GAAG,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;AAC7B,MAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;AAE1C,MAAI,CAAC,KAAK,GAAG,UAAS,GAAG,EAAE;AACzB,OAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;AAC3B,QAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AAC9B,QAAI,CAAC,MAAM,GAAG,GAAG,CAAC;GACnB,CAAC;AACF,MAAI,CAAC,GAAG,GAAG,YAAW;AACpB,QAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;AACnB,QAAI,CAAC,MAAM,GAAG,CAAC,CAAC;GACjB,CAAC;AACF,MAAI,CAAC,GAAG,GAAG,YAAW;AACpB,QAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;AACpB,QAAI,CAAC,MAAM,GAAG,CAAC,CAAC;GACjB,CAAC;AACF,MAAI,CAAC,SAAS,GAAG,YAAW;AAC1B,WAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;AAC1C,WAAO,IAAI,CAAC,MAAM,CAAC;GACpB,CAAC;CACH,CAAC;;AAEF,IAAI,OAAO,GAAG,SAAV,OAAO,CAAY,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AACpC,KAAG,GAAG,AAAC,GAAG,GAAG,GAAG,GAAI,GAAG,GAAI,AAAC,GAAG,GAAG,GAAG,GAAI,GAAG,GAAG,IAAI,AAAC,CAAC;AACrD,SAAO,GAAG,CAAC;CACZ,CAAC","file":"analogWrite.js","sourcesContent":["var routeName = \"analogWrite\";\nmodule.exports = {\n  name: \"Analog Write\",\n  routeName: routeName,\n  init: function(arduino, io, pin) {\n    return new analogWrite(arduino, pin);\n  },\n  route: function(data, fn, io, pins) {\n    if (data.pin && data.value) {\n      var pin = parseInt(data.pin);\n      pins[pin].write(parseInt(data.value));\n      io.sockets.emit(routeName + ':change', {\n        pin: pin,\n        status: pins[pin].getStatus()\n      });\n    }\n  },\n  // update: function(){}\n};\n\n\nvar analogWrite = function(arduino, pin) {\n  this.pin = pin;\n  this.status = 0;\n  console.log(pin + \"new pin\");\n  this.writePin = new arduino.Led(this.pin);\n\n  this.write = function(val) {\n    val = inRange(val, 0, 255);\n    this.writePin.brightness(val);\n    this.status = val;\n  };\n  this.off = function() {\n    this.writePin.on();\n    this.status = 1;\n  };\n  this.off = function() {\n    this.writePin.off();\n    this.status = 0;\n  };\n  this.getStatus = function() {\n    console.log(this.pin + \" \" + this.status);\n    return this.status;\n  };\n};\n\nvar inRange = function(val, min, max) {\n  val = (val > max) ? max : ((val < min) ? min : null);\n  return val;\n};\n"]}