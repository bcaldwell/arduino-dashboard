{"version":3,"sources":["../../../src/arduino/modules/digitalRead.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AAEb,IAAI,SAAS,GAAG,aAAa,CAAC;;IAExB,WAAW;AACf,WADI,WAAW,CACH,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE;0BAD1B,WAAW;;AAEb,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAI,CAAC,GAAG,GAAG,IAAI,CAAC;AAChB,QAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAChB,QAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AACvB,QAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzC,QAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;AAEtB,QAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAS,KAAK,EAAE,KAAK,EAAE;AACvC,UAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;AAC5C,aAAO,CAAC,GAAG,CAAE,KAAK,CAAC,CAAC;AACpB,UAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;AAC3D,UAAE,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,EAAE;AACrC,aAAG,EAAE,IAAI,CAAC,GAAG;AACb,gBAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC,CAAC;OACJ;KACF,CAAC,CAAC;GACJ;;eAnBG,WAAW;;gCAoBH;AACV,aAAO,IAAI,CAAC,MAAM,CAAC;KACpB;;;8BACS,MAAM,EAAC;AACf,UAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;AAC9B,UAAI,CAAC,MAAM,GAAG,MAAM,CAAA;KACrB;;;oCACe,GAAG,EAAC;AAClB,aAAQ,IAAI,CAAC,SAAS,IAAI,GAAG,GAAG,GAAG,GAAC,CAAC,GAAC,CAAC,CAAE;KAC1C;;;SA7BG,WAAW;;;AAgCjB,MAAM,CAAC,OAAO,GAAG;AACf,MAAI,EAAE,cAAc;AACpB,WAAS,EAAE,SAAS;AACpB,MAAI,EAAE,cAAS,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE;AAC/B,WAAO,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;GAC1C;AACD,OAAK,EAAE,WAAW;CACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC","file":"digitalRead.js","sourcesContent":["'use strict';\n\nvar routeName = \"digitalRead\";\n\nclass DigitalRead {\n  constructor(arduino, io, pin) {\n    var self = this;\n    this.pin = \"A0\";\n    this.status = 0;\n    this.lastStatus = null;\n    this.readPin = new arduino.Pin(this.pin);\n    this.analogPin = true;\n\n    this.readPin.read(function(error, value) {\n      self.setStatus(self.analogToDigital(value));\n      console.log (value);\n      if (self.status !== self.lastStatus && self.status !== null) {\n        io.sockets.emit(routeName + ':change', {\n          pin: self.pin,\n          status: self.status\n        });\n      }\n    });\n  }\n  getStatus() {\n    return this.status;\n  }\n  setStatus(status){\n    this.lastStatus = this.status;\n    this.status = status\n  }\n  analogToDigital(val){\n    return (this.analogPin && val < 512?0:1);\n  }\n}\n\nmodule.exports = {\n  name: \"Digital Read\",\n  routeName: routeName,\n  init: function(arduino, io, pin) {\n    return new DigitalRead(arduino, io, pin);\n  },\n  class: DigitalRead\n};\n\n// var digitalRead = function(arduino, io, pin) {\n//   var that = this;\n\n//   this.pin = \"A2\";\n//   this.status = 0;\n//   this.lastStatus = null;\n//   this.readPin = new arduino.Pin(this.pin);\n//   this.analogPin = true;\n\n//   this.readPin.read(function(error, value) {\n//     that.setStatus(that.analogToDigital(value));\n//     if (that.status !== that.lastStatus && that.status !== null) {\n//       io.sockets.emit(routeName + ':change', {\n//         pin: that.pin,\n//         status: that.status\n//       });\n//     }\n//   });\n\n//   this.getStatus = function() {\n//     return this.status;\n//   };\n//   this.setStatus = function(status){\n//     this.lastStatus = this.status;\n//     this.status = status;\n//   };\n//   this.analogToDigital = function(val){\n//     return (this.analogPin && val < 512?0:1);\n//   };\n// };\n"]}