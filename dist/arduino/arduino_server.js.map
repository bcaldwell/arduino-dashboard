{"version":3,"sources":["../../src/arduino/arduino_server.js"],"names":[],"mappings":"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","file":"arduino_server.js","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar socket = require('socket.io');\nvar Q = require('q');\nvar path = require('path');\nvar io;\n\n//read modules into json object\n//use q to read modules before continuing\nvar modules = {};\nvar deferred = Q.defer();\nfs.readdir(path.resolve(__dirname + '/modules'), function(err, files) {\n  if (err) console.log(err);\n  for (let i = 0; i < files.length; i++) {\n    var file = files[i];\n    if (file[0] !== \"-\" && file.substr(file.length - 3) === \".js\") {\n\n      var module = require('./modules/' + file);\n      modules[module.name] = module;\n    }\n    if (i === files.length - 1) {\n        deferred.resolve();\n      }\n  }\n});\n\nmodule.exports.listen = function(server, arduino, pins) {\n  deferred.promise.then(function() {\n\n    io = socket.listen(server);\n\n\n    io.sockets.on('connection', function(socket) {\n      socket.on('error', function(a, b) {\n        console.log(\"Error\");\n        console.log(a);\n        console.log(b);\n      });\n\n      socket.on('new pin', function(data, fn) {\n        //todo only change if different otherwise dont do anything\n        !fn ? fn = function(msg) {\n          io.to(this.id).emit(msg)\n        }.bind(this) : null;\n        //data.pin = parseInt(data.pin);\n        if (modules[data.type]){\n          pins[data.pin] = modules[data.type].init(arduino, io, data.pin);\n          fn(pins[data.pin].getStatus());\n        } else {\n          console.log (\"No module named: \" + data.type);\n        }\n\n      });\n      Object.keys(modules).forEach(function(name, i) {\n        console.log(name + \" \" + i);\n        if (modules[name].route) {\n          socket.on(modules[name].routeName, function(data, fn) {\n            modules[name].route(data, fn, io, pins);\n          });\n        }\n      });\n    });\n  });\n};\n"]}